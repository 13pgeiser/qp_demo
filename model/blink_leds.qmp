<?xml version="1.0" encoding="UTF-8"?>
<package name="BlinkLeds" stereotype="0x00">
 <class name="BlinkEvt" superclass="qpc::QEvt">
  <attribute name="count" type="int" visibility="0x01" properties="0x00">
   <documentation>Number of blinking events</documentation>
  </attribute>
  <operation name="ctor" type="QEvt const *" visibility="0x00" properties="0x00">
   <parameter name="count" type="int"/>
   <code>me-&gt;super.sig = BLINK_SIG;
me-&gt;count = count;
return &amp;me-&gt;super;</code>
  </operation>
 </class>
 <class name="StartStopEvt" superclass="qpc::QEvt">
  <operation name="ctor" type="QEvt const *" visibility="0x00" properties="0x00">
   <parameter name="sig" type="enum_t const"/>
   <code>me-&gt;super.sig = sig;
return &amp;me-&gt;super;</code>
  </operation>
 </class>
 <class name="BlinkLedsHsm" superclass="qpc::QActive">
  <attribute name="aoSto[10]" type="QEvt const*" visibility="0x00" properties="0x00"/>
  <attribute name="count" type="int" visibility="0x00" properties="0x00"/>
  <attribute name="tmoEvt" type="QTimeEvt" visibility="0x00" properties="0x00"/>
  <statechart properties="0x01">
   <initial target="../1">
    <initial_glyph conn="26,2,5,0,15,3">
     <action box="0,-2,10,2"/>
    </initial_glyph>
   </initial>
   <state name="idle">
    <tran trig="START" target="../../2">
     <tran_glyph conn="34,16,2,0,6">
      <action box="1,2,10,2"/>
     </tran_glyph>
    </tran>
    <tran trig="CATCH_ALL">
     <action brief="\Error, unhandled signal">Q_ERROR();</action>
     <tran_glyph conn="30,12,3,-1,17">
      <action box="0,-2,17,5"/>
     </tran_glyph>
    </tran>
    <state_glyph node="30,5,22,11"/>
   </state>
   <state name="ready">
    <documentation>Ready state. The system is initialized.</documentation>
    <tran trig="BLINK" target="../3/1">
     <action>BlinkEvt const* evt = Q_EVT_CAST(BlinkEvt);
me-&gt;count = evt-&gt;count;</action>
     <tran_glyph conn="4,42,3,3,8">
      <action box="0,-2,10,2"/>
     </tran_glyph>
    </tran>
    <tran trig="STOP" target="../../1">
     <tran_glyph conn="48,22,0,2,-6">
      <action box="1,-5,10,2"/>
     </tran_glyph>
    </tran>
    <tran trig="CATCH_ALL">
     <action brief="\Error, unhandled signal">Q_ERROR();</action>
     <tran_glyph conn="4,60,3,-1,18">
      <action box="0,-2,17,5"/>
     </tran_glyph>
    </tran>
    <state name="blinking">
     <documentation>blinking state. We are toggling the leds between state_a and state_b
and we exit once the countdown has reached 0</documentation>
     <tran trig="BLINK">
      <action brief="\Ignore while already blinking!"/>
      <tran_glyph conn="10,52,3,-1,24">
       <action box="0,-2,23,5"/>
      </tran_glyph>
     </tran>
     <state name="state_a">
      <entry brief="\Led1 Off\Led2 On\Arm Timer">QTimeEvt_armX(&amp;me-&gt;tmoEvt, 5, 0);
BSP_led(BSP_LED_1, false);
BSP_led(BSP_LED_2, true);</entry>
      <tran trig="TMO" target="../../2">
       <tran_glyph conn="32,40,1,3,24">
        <action box="2,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="12,34,20,14">
       <entry box="1,2,17,10"/>
      </state_glyph>
     </state>
     <state name="state_b">
      <entry brief="\Led1 On\Led2 Off\Arm Timer">QTimeEvt_armX(&amp;me-&gt;tmoEvt, 5, 0);
BSP_led(BSP_LED_1, true);
BSP_led(BSP_LED_2, false);</entry>
      <tran trig="TMO">
       <action brief="\count--">me-&gt;count --;</action>
       <choice target="../../../..">
        <guard>else</guard>
        <action brief="\wait for next event"/>
        <choice_glyph conn="44,45,4,2,19">
         <action box="1,3,10,7"/>
        </choice_glyph>
       </choice>
       <choice target="../../../1">
        <guard brief="count &gt;= 0">me-&gt;count &gt;= 0</guard>
        <choice_glyph conn="44,45,5,1,-12">
         <action box="-10,-3,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="56,45,3,-1,-12">
        <action box="-8,-2,12,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="56,34,20,14">
       <entry box="1,2,17,10"/>
      </state_glyph>
     </state>
     <state_glyph node="10,30,68,26"/>
    </state>
    <state_glyph node="4,22,80,42"/>
   </state>
   <state_diagram size="88,68"/>
  </statechart>
 </class>
 <class name="BlinkLeds">
  <operation name="Blink" type="void" visibility="0x00" properties="0x01">
   <parameter name="count" type="int"/>
   <code>QEvt const* e = Q_NEW(BlinkEvt, count);
QACTIVE_POST(ao, e, ao);</code>
  </operation>
  <operation name="Ctor" type="void" visibility="0x00" properties="0x01">
   <code>Q_ASSERT(ao == NULL);
memset(&amp;thisAo , 0, sizeof(thisAo));
QActive_ctor(&amp;thisAo.super, Q_STATE_CAST(&amp;BlinkLedsHsm_initial));
QTimeEvt_ctorX(&amp;thisAo.tmoEvt, &amp;thisAo.super, TMO_SIG, 0U);
QACTIVE_START(&amp;thisAo.super,        /* active object to start */
              2U,                   /* priority of the active object */
              thisAo.aoSto,         /* event queue buffer */
              Q_DIM(thisAo.aoSto),  /* the length of the buffer */
              (void *)0, 0U,        /* private stack (not used) */
              (QEvt *)0);           /* initialization event (not used) */
ao = &amp;thisAo.super;</code>
  </operation>
  <operation name="Start" type="void" visibility="0x00" properties="0x01">
   <code>QACTIVE_POST(ao, Q_NEW(StartStopEvt, START_SIG), ao);</code>
  </operation>
  <operation name="Stop" type="void" visibility="0x00" properties="0x01">
   <code>QACTIVE_POST(ao, Q_NEW(StartStopEvt, STOP_SIG), ao);</code>
  </operation>
 </class>
 <directory name="generated">
  <file name="blink_leds.c">
   <text>#include &lt;string.h&gt;
#include &lt;bsp.h&gt;
#include &quot;blink_leds.h&quot;
#include &quot;model.h&quot;

Q_DEFINE_THIS_FILE

$declare${BlinkLeds::BlinkEvt}
$declare${BlinkLeds::StartStopEvt}
$declare${BlinkLeds::BlinkLedsHsm}

static BlinkLedsHsm thisAo;
static QActive* ao = NULL;

$define${BlinkLeds}
</text>
  </file>
  <file name="blink_leds.h">
   <text>#ifndef BLINK_LEDS_H
#define BLINK_LEDS_H

#include &quot;signals.h&quot;

$declare${BlinkLeds::BlinkLeds}

#endif // BLINK_LEDS_H
</text>
  </file>
 </directory>
</package>
